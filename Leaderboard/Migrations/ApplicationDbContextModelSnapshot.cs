// <auto-generated />
using System;
using Leaderboard.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Leaderboard.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Leaderboard.Areas.Identity.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Leaderboard.Areas.Identity.Models.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Leaderboard.Areas.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(13,3)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Leaderboard.Areas.Identity.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Leaderboard.Areas.Identity.Models.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Leaderboard.Areas.Identity.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Leaderboard.Areas.Identity.Models.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Leaderboard.Areas.Leaderboards.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "642313a2-1f0c-4329-a676-7a9cdac045bd",
                            Name = "Powerlifting"
                        },
                        new
                        {
                            Id = "9edc53a6-34ec-4cde-8eb0-cac009579b72",
                            Name = "Weightlifting"
                        },
                        new
                        {
                            Id = "6772a358-e5b7-49dd-a49b-9d855ed46c5e",
                            Name = "Running"
                        });
                });

            modelBuilder.Entity("Leaderboard.Areas.Leaderboards.Models.Division", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int?>("AgeLowerBound")
                        .HasColumnType("integer");

                    b.Property<int?>("AgeUpperBound")
                        .HasColumnType("integer");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Gender", "Name")
                        .IsUnique();

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("Leaderboard.Areas.Leaderboards.Models.DivisionCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DivisionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("CategoryId", "DivisionId")
                        .IsUnique();

                    b.ToTable("DivisionCategories");
                });

            modelBuilder.Entity("Leaderboard.Areas.Leaderboards.Models.DivisionWeightClass", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("DivisionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WeightClassId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("WeightClassId");

                    b.HasIndex("DivisionId", "WeightClassId")
                        .IsUnique();

                    b.ToTable("DivisionWeightClasses");
                });

            modelBuilder.Entity("Leaderboard.Areas.Leaderboards.Models.LeaderboardModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("DivisionId")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UOMId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WeightClassId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UOMId");

                    b.HasIndex("WeightClassId");

                    b.HasIndex("DivisionId", "WeightClassId", "Name")
                        .IsUnique();

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("Leaderboard.Areas.Leaderboards.Models.ScoreModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BoardId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(12,4)");

                    b.Property<string>("VideoProofId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoProofId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("Leaderboard.Areas.Leaderboards.Models.UnitOfMeasureModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Unit")
                        .IsUnique();

                    b.ToTable("UnitsOfMeasure");

                    b.HasData(
                        new
                        {
                            Id = "e362dd90-d6fe-459b-ba26-09db002bfff6",
                            IsActive = true,
                            Unit = "Kilograms"
                        },
                        new
                        {
                            Id = "12c7c15a-db13-4912-a7c8-fc86db54849b",
                            IsActive = true,
                            Unit = "Seconds"
                        },
                        new
                        {
                            Id = "d77c24f6-54f1-448d-9117-ea4e7034904f",
                            IsActive = true,
                            Unit = "Meters"
                        });
                });

            modelBuilder.Entity("Leaderboard.Areas.Leaderboards.Models.WeightClass", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int?>("WeightLowerBound")
                        .HasColumnType("integer");

                    b.Property<int?>("WeightUpperBound")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WeightLowerBound", "WeightUpperBound")
                        .IsUnique();

                    b.ToTable("WeightClasses");
                });

            modelBuilder.Entity("Leaderboard.Models.FileModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("Leaderboard.Models.Relationships.UserCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("CategoryId", "UserId")
                        .IsUnique();

                    b.ToTable("UserCategories");
                });

            modelBuilder.Entity("Leaderboard.Models.Relationships.UserLeaderboard", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("LeaderboardId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LeaderboardId");

                    b.HasIndex("UserId", "LeaderboardId")
                        .IsUnique();

                    b.ToTable("UserLeaderboards");
                });

            modelBuilder.Entity("Leaderboard.Areas.Identity.Models.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Leaderboard.Areas.Identity.Models.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leaderboard.Areas.Identity.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("Leaderboard.Areas.Identity.Models.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leaderboard.Areas.Identity.Models.ApplicationUserLogin", b =>
                {
                    b.HasOne("Leaderboard.Areas.Identity.Models.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leaderboard.Areas.Identity.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Leaderboard.Areas.Identity.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leaderboard.Areas.Identity.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leaderboard.Areas.Identity.Models.ApplicationUserToken", b =>
                {
                    b.HasOne("Leaderboard.Areas.Identity.Models.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leaderboard.Areas.Leaderboards.Models.DivisionCategory", b =>
                {
                    b.HasOne("Leaderboard.Areas.Leaderboards.Models.Category", "Category")
                        .WithMany("DivisionCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leaderboard.Areas.Leaderboards.Models.Division", "Division")
                        .WithMany("DivisionCategories")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leaderboard.Areas.Leaderboards.Models.DivisionWeightClass", b =>
                {
                    b.HasOne("Leaderboard.Areas.Leaderboards.Models.Division", "Division")
                        .WithMany("WeightClasses")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leaderboard.Areas.Leaderboards.Models.WeightClass", "WeightClass")
                        .WithMany("Divisions")
                        .HasForeignKey("WeightClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leaderboard.Areas.Leaderboards.Models.LeaderboardModel", b =>
                {
                    b.HasOne("Leaderboard.Areas.Leaderboards.Models.Division", "Division")
                        .WithMany("Boards")
                        .HasForeignKey("DivisionId");

                    b.HasOne("Leaderboard.Areas.Leaderboards.Models.UnitOfMeasureModel", "UOM")
                        .WithMany("Boards")
                        .HasForeignKey("UOMId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Leaderboard.Areas.Leaderboards.Models.WeightClass", "WeightClass")
                        .WithMany("Boards")
                        .HasForeignKey("WeightClassId");
                });

            modelBuilder.Entity("Leaderboard.Areas.Leaderboards.Models.ScoreModel", b =>
                {
                    b.HasOne("Leaderboard.Areas.Leaderboards.Models.LeaderboardModel", "Board")
                        .WithMany("Scores")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leaderboard.Areas.Identity.Models.ApplicationUser", "User")
                        .WithMany("Scores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leaderboard.Models.FileModel", "VideoProof")
                        .WithMany()
                        .HasForeignKey("VideoProofId");
                });

            modelBuilder.Entity("Leaderboard.Models.FileModel", b =>
                {
                    b.HasOne("Leaderboard.Areas.Identity.Models.ApplicationUser", "CreatedBy")
                        .WithMany("UploadedFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leaderboard.Models.Relationships.UserCategory", b =>
                {
                    b.HasOne("Leaderboard.Areas.Leaderboards.Models.Category", "Category")
                        .WithMany("UserCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leaderboard.Areas.Identity.Models.ApplicationUser", "User")
                        .WithMany("UserCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leaderboard.Models.Relationships.UserLeaderboard", b =>
                {
                    b.HasOne("Leaderboard.Areas.Leaderboards.Models.LeaderboardModel", "Leaderboard")
                        .WithMany("UserLeaderboards")
                        .HasForeignKey("LeaderboardId");

                    b.HasOne("Leaderboard.Areas.Identity.Models.ApplicationUser", "User")
                        .WithMany("UserLeaderboards")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
